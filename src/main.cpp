#include "raylib.h"
#include "raymath.h"

#include <iostream>
#include <vector>
#include <array>
#include <list>

#include "pallette.h"

constexpr size_t WIDTH = 80;
constexpr size_t HEIGHT = 60;
constexpr size_t TOTAL_TILES = WIDTH * HEIGHT;
constexpr float FONT_SIZE = 8;

constexpr int FRAME_PER_SECOND = 60;

struct Group {
	int width, offset_x, offset_y;
	std::vector<unsigned char> codepoints;
	std::vector<unsigned char> colors;

	constexpr Group(int width, int offset_x, int offset_y, std::vector<unsigned char> codepoints, std::vector<unsigned char> colors) : width(width), offset_x(offset_x), offset_y(offset_y), codepoints(codepoints), colors(colors) {};
};

const Group PLAYER_GROUP = Group(
	5, -2, -1,
	{
		0x00, 0x00, 0xef, 0x00, 0x00,
		0x00, 0xb4, 0x7f, 0xc3, 0x00,
		0x2f, 0x5b, 0xba, 0x5d, 0x5c,
		0x00, 0x5c, 0xc4, 0x2f, 0x00
	},
	{
		0x00, 0x00, 0x0f, 0x00, 0x00,
		0x00, 0x0f, 0x07, 0x0f, 0x00,
		0x9f, 0x9f, 0x0f, 0x9f, 0x9f,
		0x00, 0x9f, 0x9f, 0x9f, 0x00
	}
);

const Group BOSS_WING_BASE = Group(
	16, 0, 1,
	{
		0xda, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xbf,
		0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb3,
		0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb3,
		0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb3,
		0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb3,
		0xc0, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc2, 0xc4, 0xc4, 0xc2, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xd9,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xb2, 0xb2, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	{
		0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c,
		0x9c, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x9c,
		0x9c, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x9c,
		0x9c, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x9c,
		0x9c, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x9c,
		0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x17, 0x17, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
);

const Group BOSS_WING_COVER = Group(
	16, 0, 6,
	{
		0xc3, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xb4,
		0xb3, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb3,
		0xc0, 0xc4, 0xc2, 0xc2, 0xc4, 0xc4, 0xc4, 0xc2, 0xc2, 0xc4, 0xc4, 0xc4, 0xc2, 0xc2, 0xc4, 0xd9,

		0x00, 0x00, 0xb2, 0xb2, 0x00, 0x00, 0x00, 0xb2, 0xb2, 0x00, 0x00, 0x00, 0xb2, 0xb2, 0x00, 0x00,
	},
	{
		0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c,
		0x9c, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0x9c,
		0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c,

		0x00, 0x00, 0x9e, 0x9e, 0x00, 0x00, 0x00, 0x9e, 0x9e, 0x00, 0x00, 0x00, 0x9e, 0x9e, 0x00, 0x00,
	}
);

const Group BOSS_BODY_BASE = Group(
	14, 0, 0,
	{
		0x00, 0x00, 0x00, 0xc9, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xbb, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xba, 0xba, 0x09, 0xcd, 0xcd, 0xcd, 0xcd, 0x09, 0xba, 0xba, 0x00, 0x00,
		0xcd, 0xcd, 0xba, 0xba, 0xba, 0x2f, 0xb0, 0xb0, 0x5c, 0xba, 0xba, 0xba, 0xcd, 0xcd,
		0x00, 0x00, 0xba, 0xba, 0xba, 0xb0, 0xb2, 0xb2, 0xb0, 0xba, 0xba, 0xba, 0x00, 0x00,
		0x00, 0x00, 0xba, 0xba, 0xba, 0xb0, 0xb2, 0xb2, 0xb0, 0xba, 0xba, 0xba, 0x00, 0x00,
		0xcd, 0xcd, 0xba, 0xba, 0xba, 0x5c, 0xb0, 0xb0, 0x2f, 0xba, 0xba, 0xba, 0xcd, 0xcd,
		0x00, 0x00, 0xba, 0xba, 0x09, 0xcd, 0xcd, 0xcd, 0xcd, 0x09, 0xba, 0xba, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xcc, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xb9, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xba, 0xc4, 0xb0, 0xb2, 0xb2, 0xb0, 0xc4, 0xba, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x9a, 0xc4, 0xb0, 0xb2, 0xb2, 0xb0, 0xc4, 0x9a, 0x00, 0x00, 0x00,
	},
	{
		0x00, 0x00, 0x00, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x9e, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9c, 0x9c, 0x9e, 0x00, 0x00,
		0x9e, 0x9e, 0x9e, 0x9c, 0x9e, 0x9e, 0x17, 0x17, 0x9e, 0x9e, 0x9c, 0x9e, 0x9e, 0x9e,
		0x00, 0x00, 0x9e, 0x9c, 0x9e, 0x17, 0x17, 0x17, 0x17, 0x9e, 0x9c, 0x9e, 0x00, 0x00,
		0x00, 0x00, 0x9e, 0x9c, 0x9e, 0x17, 0x17, 0x17, 0x17, 0x9e, 0x9c, 0x9e, 0x00, 0x00,
		0x9e, 0x9e, 0x9e, 0x9c, 0x9e, 0x9e, 0x17, 0x17, 0x9e, 0x9e, 0x9c, 0x9e, 0x9e, 0x9e,
		0x00, 0x00, 0x9e, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9c, 0x9c, 0x9e, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x9c, 0x9e, 0x17, 0x17, 0x17, 0x17, 0x9e, 0x9c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x9c, 0x9e, 0x17, 0x17, 0x17, 0x17, 0x9e, 0x9c, 0x00, 0x00, 0x00,
	}
	);

const Group BOSS_BODY_COVER = Group(
	8, 3, 8,
	{
		0x00, 0x2f, 0xb0, 0xb0, 0xb0, 0xb0, 0x5c, 0x00,
		0x00, 0x2f, 0xb2, 0xb2, 0xb2, 0xb2, 0x5c, 0x00,
		0xef, 0x2f, 0xb2, 0xb2, 0xb2, 0xb2, 0x5c, 0xef,
		0x9a, 0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb3, 0x9a,
		0xb3, 0xb3, 0xc4, 0xc4, 0xc4, 0xc4, 0xb3, 0xb3,
		0xc3, 0x2f, 0xc4, 0xc4, 0xc4, 0xc4, 0x5c, 0xb4,
		0x5c, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x2f,
	},
	{
		0x00, 0x9e, 0xb7, 0xb7, 0xb7, 0xb7, 0x9e, 0x00,
		0x00, 0x9e, 0xb7, 0xb7, 0xb7, 0xb7, 0x9e, 0x00,
		0x9e, 0x9e, 0xb7, 0xb7, 0xb7, 0xb7, 0x9e, 0x9e,
		0x9e, 0x9e, 0xb7, 0xb7, 0xb7, 0xb7, 0x9e, 0x9e,
		0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e,
		0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e,
		0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e,
	}
);

struct Screen {
	Texture2D cp437_8x8;

	std::array<unsigned char, TOTAL_TILES> codepoints;
	std::array<unsigned char, TOTAL_TILES> colors;

	Screen(const char* title) {
		InitWindow(WIDTH * FONT_SIZE, HEIGHT * FONT_SIZE, title);
		cp437_8x8 = LoadTexture("fonts/cp437_8x8.png");
		ClearScreen();
	}

	~Screen() {
		UnloadTexture(cp437_8x8);
		CloseWindow();
	}

	void DrawTile(int x, int y, unsigned char codepoint, unsigned char color) {
		if (x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT && codepoint != 0x00) {
			codepoints.at(x + y * WIDTH) = codepoint;
			colors.at(x + y * WIDTH) = color;
		}
	}

	void DrawGroup(int x, int y, const Group& group) {
		for (int i = 0; i < group.codepoints.size(); ++i) {
			DrawTile(x + group.offset_x + i % group.width, y + group.offset_y + i / group.width, group.codepoints[i], group.colors[i]);
		}
	}

	void DrawBorder(
		unsigned char tl, unsigned char tr,
		unsigned char bl, unsigned char br,
		unsigned char ht, unsigned char vt,
		unsigned char color
	) {
		DrawTile(0, 0, tl, color);
		DrawTile(WIDTH - 1, 0, tr, color);
		DrawTile(0, HEIGHT - 1, bl, color);
		DrawTile(WIDTH - 1, HEIGHT - 1, br, color);
		for (int i = 1; i < WIDTH - 1; ++i) {
			DrawTile(i, 0, ht, color);
			DrawTile(i, HEIGHT - 1, ht, color);
		}
		for (int i = 1; i < HEIGHT - 1; ++i) {
			DrawTile(0, i, vt, color);
			DrawTile(WIDTH - 1, i, vt, color);
		}
	}

	void DrawText(const char* text, int x, int y, unsigned char color) {
		int textOffsetX = 0, textOffsetY = 0;
		for (int i = 0; i < TextLength(text); ++i) {
			if (text[i] == '\n') {
				textOffsetX = 0;
				++textOffsetY;
			}
			else {
				DrawTile(x + textOffsetX, y + textOffsetY, text[i], color);
				++textOffsetX;
			}
		}
	}

	void ClearScreen() {
		codepoints.fill(0x20);
		colors.fill(0x00);
	}

	void DrawScreen() const {
		for (int i = 0; i < TOTAL_TILES; ++i) {
			DrawTexturePro(cp437_8x8, SourceRect(codepoints.at(i)), DestRect(i), { 0, 0 }, 0, PALLETTE[colors.at(i)]);
		}
	}

	static constexpr Rectangle SourceRect(unsigned char codepoint) {
		return { static_cast<float>(8 * (codepoint % 16)), static_cast<float>(8 * (codepoint / 16)), 8, 8 };
	}

	static constexpr Rectangle DestRect(int tile_index) {
		return { FONT_SIZE * (tile_index % WIDTH), FONT_SIZE * (tile_index / WIDTH), FONT_SIZE, FONT_SIZE };
	}
};

struct Bullet {
	int pos_x, pos_y, dir_x, dir_y, speed, accel, maxspeed;
	bool capped;
	int cd;
	Bullet(int pos_x, int pos_y, int dir_x, int dir_y, int speed, int accel = 0, int maxspeed = 0) :
		pos_x(pos_x),
		pos_y(pos_y),
		dir_x(dir_x),
		dir_y(dir_y),
		speed(speed),
		accel(accel),
		maxspeed(maxspeed),
		capped(accel >= 0 ? (speed >= maxspeed) : (speed <= maxspeed))
	{
		cd = FRAME_PER_SECOND;
	}

	void Update() {
		if (!capped) {
			speed += accel;
			capped = accel >= 0 ? (speed >= maxspeed) : (speed <= maxspeed);
		}
		if (cd <= 0) {
			if (speed >= 0) {
				pos_x += dir_x;
				pos_y += dir_y;
			}
			else {
				pos_x -= dir_x;
				pos_y -= dir_y;
			}
			cd = FRAME_PER_SECOND;
		}
		cd -= abs(speed);
	}
};

struct GameManager {
	int player_x, player_y, player_lives;

	std::list<Bullet> bullets;
	int shot_cd = 0;

	GameManager(int player_x, int player_y, int player_lives) : player_x(player_x), player_y(player_y), player_lives(player_lives) {};

	void Update() {
		int dir_x = 0, dir_y = 0;
		if (IsKeyDown(KEY_UP)) --dir_y;
		if (IsKeyDown(KEY_DOWN)) ++dir_y;
		if (IsKeyDown(KEY_LEFT)) --dir_x;
		if (IsKeyDown(KEY_RIGHT)) ++dir_x;

		if (IsKeyDown(KEY_C) and shot_cd <= 0) {
			bullets.emplace_back(player_x - 1, player_y - 1, 0, -1, 60);
			bullets.emplace_back(player_x, player_y - 2, 0, -1, 60);
			bullets.emplace_back(player_x + 1, player_y - 1, 0, -1, 60);
			shot_cd = 5;
		}

		player_x = std::min(std::max(player_x + dir_x, 1), static_cast<int>(WIDTH - 2));
		player_y = std::min(std::max(player_y + dir_y, 1), static_cast<int>(HEIGHT - 2));
		for (auto it = bullets.begin(); it != bullets.end(); ++it) {
			it->Update();
			//if (it->pos_x < 1 || it->pos_x > WIDTH - 2 || it->pos_y < 1 || it->pos_y > HEIGHT - 2) {
			//	bullets.erase(it);
			//}
		}
		--shot_cd;
	}

	void Draw(Screen& sc) {
		sc.DrawGroup(player_x, player_y, PLAYER_GROUP);
		for (auto it = bullets.cbegin(); it != bullets.cend(); ++it) {
			sc.DrawTile(it->pos_x, it->pos_y, 0x13, 0x37);
		}
		sc.DrawBorder(0xc9, 0xbb, 0xc8, 0xbc, 0xcd, 0xba, 0x9f);
		sc.DrawText(" LIVES:  ", 3, HEIGHT - 1, 0xbf);
		sc.DrawText(TextFormat("%d", player_lives), 10, HEIGHT - 1, 0x07);
	}
};

int main()
{
	Screen sc("u tell me a Tung text-based this game jam");
	GameManager g(WIDTH / 2, HEIGHT - 10, 3);
	SetTargetFPS(FRAME_PER_SECOND);
	while (!WindowShouldClose())
	{
		g.Update();

		sc.ClearScreen();
		g.Draw(sc);
		sc.DrawGroup(0, 0, BOSS_WING_BASE);
		sc.DrawGroup(0, 0, BOSS_WING_COVER);
		sc.DrawGroup(30, 0, BOSS_WING_BASE);
		sc.DrawGroup(30, 0, BOSS_WING_COVER);
		sc.DrawGroup(16, 0, BOSS_BODY_BASE);
		sc.DrawGroup(16, 0, BOSS_BODY_COVER);

		BeginDrawing();
		ClearBackground(BLACK);
		sc.DrawScreen();
		EndDrawing();
	}
	return 0;
}